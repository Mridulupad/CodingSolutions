Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Note that an empty string is also considered valid.


public class ValidPranthesis {

	public boolean matchParanthesis(String s) {
		Boolean returnValue=false;
		 if(s.length() == 0){
			 returnValue=true;
	            return true;
		 }
			
	        if(s.length() % 2 == 1){
	        	returnValue=false;
	            return false;
	        }
	        	
	        
	        Stack<Character> stack= new Stack<Character>();
	        
	        for(int i = 0; i < s.length(); i++) {
	            
	            char c= s.charAt(i);
	            
				// PUSH OPENING BRACKETS INTO THE STACK
	            if(c == '{' || c == '[' || c == '(') {
	                stack.push(c);
	                continue;
	            }
	            else {
					// INDICATION OF THE FACT THAT CLOSING BRACKETS
					// ARE NOT IN THE RIGHT ORDER/NUMBER
	                if(stack.empty()){
	                	returnValue=false;
	    	            return false;
	                }
	                    
	                
					// INVALID PARENTHESES CHECK
	                if(c == '}' && stack.peek() == '{') {
	                    stack.pop();
	                    continue;
	                }
	                if(c == ']' && stack.peek() == '[') {
	                    stack.pop();
	                    continue;
	                }
	                if(c == ')' && stack.peek() == '(') {
	                    stack.pop();
	                    continue;
	                }
	                else{
	                	returnValue=false;
	    	            return false;
	                }
	                   
	            }
	            
	        }
	        
		
	        System.out.println(stack.empty());
	        return stack.empty();
	    }
	
